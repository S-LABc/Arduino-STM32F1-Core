# For more info: https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=STM32F1 Boards
version=0.1.2

# STM32F1 compiler variables
# ----------------------

compiler.warning_flags=-w -DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.none=-w -DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.default=-DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.more=-Wall -DDEBUG_LEVEL=DEBUG_FAULT
compiler.warning_flags.all=-Wall -Wextra -DDEBUG_LEVEL=DEBUG_ALL

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-c -g {build.flags.optimize} {compiler.warning_flags} -std=gnu11 -MMD -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -DBOARD_{build.variant} -D{build.vect} -DERROR_LED_PORT={build.error_led_port} -DERROR_LED_PIN={build.error_led_pin} 
compiler.c.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags={build.flags.optimize} -Wl,--gc-sections {build.flags.ldspecs}
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -MMD
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-c -g {build.flags.optimize} {compiler.warning_flags} -std=gnu++11 -MMD -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -fno-use-cxa-atexit -DBOARD_{build.variant} -D{build.vect} -DERROR_LED_PORT={build.error_led_port} -DERROR_LED_PIN={build.error_led_pin} 
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags={build.flags.ldspecs}
compiler.size.cmd=arm-none-eabi-size
compiler.define=-DARDUINO=                            

## This can be overriden in boards.txt
build.f_cpu=72000000L
build.mcu=cortex-m3
build.common_flags=-mthumb -march=armv7-m -D__STM32F1__
build.variant_system_lib=libmaple.a
## LED stuff is not really used but is still required in the code
build.error_led_port=GPIOB
build.error_led_pin=1
build.cpu_flags=
build.hs_flag=
build.upload_flags=
build.flags.optimize=-Os
build.flags.ldspecs=--specs=nano.specs
build.extra_flags= {build.upload_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags}

## These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags="-L{build.variant.path}/ld"
compiler.cpp.extra_flags= 
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

compiler.libs.c.flags="-I{build.system.path}/libmaple" "-I{build.system.path}/libmaple/include" "-I{build.system.path}/libmaple/stm32f1/include" "-I{build.system.path}/libmaple/usb/stm32f1" "-I{build.system.path}/libmaple/usb/usb_lib" 

# STM32F1 USB Flags
# ---------

#build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'
## Default usb manufacturer will be replaced at compile time using numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"

# STM32F1 build patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mcpu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mcpu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -mcpu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -mcpu={build.mcu} "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -lm -lgcc -mthumb -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--warn-unresolved-symbols -Wl,--start-group {object_files} "{archive_file_path}" -Wl,--end-group

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.rodata|\.text.align|\.ARM.exidx)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*

## Save Compiled Binary
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

# STM32F1 Uploader tools
# -------------------

## ST-Link
### COMMAND
tools.stlink.cmd=stlink
tools.stlink.cmd.windows=stlink_upload.bat
### PATH
tools.stlink.path.windows={runtime.tools.stm32-f1-tools.path}/win
tools.stlink.path.macosx={runtime.tools.stm32-f1-tools.path}/macosx
tools.stlink.path.linux={runtime.tools.stm32-f1-tools.path}/linux
tools.stlink.path.linux64={runtime.tools.stm32-f1-tools.path}/linux64
### ERASE
tools.stlink.erase.params.verbose=-v
tools.stlink.erase.params.quiet=-q -q
tools.stlink.erase.pattern="{path}/{cmd}" -ME
### BOOTLOADER
tools.stlink.bootloader.params.verbose=-v
tools.stlink.bootloader.params.quiet=-q -q
tools.stlink.bootloader.pattern="{path}/{cmd}" "{runtime.platform.path}/bootloaders/{bootloader.file}"
### PROGRAMM
tools.stlink.program.params.verbose=-d
tools.stlink.program.params.quiet=
tools.stlink.program.pattern="{path}/{cmd}" "{build.path}/{build.project_name}.bin"
### UPLOAD
tools.stlink.upload.params.verbose=-d
tools.stlink.upload.params.quiet=
tools.stlink.upload.pattern="{path}/{cmd}" "{build.path}/{build.project_name}.bin"

## Serial
## Added tool for generic STM32 upload via serial to Serial Port 1 (pins PA9 and PA10) - note. Boot0 line needs to high on board reset to enable upload via serial
## at the end up the upload the program is automatically run, without the board being reset
tools.uart.cmd=uart
tools.uart.cmd.windows=serial_upload.bat
tools.uart.cmd.macosx=serial_upload

tools.uart.path={runtime.tools.stm32-f1-tools.path}/win
tools.uart.path.macosx={runtime.tools.stm32-f1-tools.path}/macosx
tools.uart.path.linux={runtime.tools.stm32-f1-tools.path}/linux
tools.uart.path.linux64={runtime.tools.stm32-f1-tools.path}/linux64

tools.uart.upload.params.verbose=-d
tools.uart.upload.params.quiet=n
tools.uart.upload.pattern="{path}/{cmd}" {serial.port.file} {upload.altID} {upload.usbID} "{build.path}/{build.project_name}.bin"

## HID Bootloader Upload 2.2.2
tools.hid.cmd=hid
tools.hid.cmd.windows=hid-flash.exe
tools.hid.cmd.macosx=hid_flash

tools.hid.path={runtime.tools.stm32-f1-tools.path}/win
tools.hid.path.macosx={runtime.tools.stm32-f1-tools.path}/macosx
tools.hid.path.linux={runtime.tools.stm32-f1-tools.path}/linux
tools.hid.path.linux64={runtime.tools.stm32-f1-tools.path}/linux64

tools.hid.upload.params.verbose=-d
tools.hid.upload.params.quiet=n
tools.hid.upload.pattern="{path}/{cmd}" "{build.path}/{build.project_name}.bin"
